(()=>{"use strict";var e=function(){function e(){}return e.show=function(e){var n;switch(e){case"ru":n="Пожалуйста подождите!...";break;case"en":n="Please wait...";break;case"kk":n="Өтінеміз, күте тұрыңыз...";break;default:n="Пожалуйста подождите!..."}document.body.insertAdjacentHTML("beforeend",'<div class="pi_tech_container" id="pi_tech_spinner">\n    <div>\n        <svg height="130px" width="130px" viewBox="0 0 1018 858" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <path d="M901.567 0L29.2931 0.00158481C18.4749 0.00158576 9.09657 7.48817 6.69975 18.0376L0.832147 43.8635C-2.46179 58.3616 8.55821 72.166 23.4258 72.1659L180.54 72.1645L163.941 144.332H1013.86C1032.42 71.5038 977.404 0 901.567 0Z"\n                  class="pi_tech_spinner_logo" fill="transparent"/>\n            <path d="M972.193 288.663H130.744L87.1538 478.183L237.801 478.181C252.669 478.181 263.689 491.986 260.395 506.484L254.527 532.31C252.13 542.859 242.752 550.346 231.934 550.346H70.556L0 857.105H199.662C252.837 857.105 299.183 820.905 312.06 769.313L348.744 622.334H788.625C840.213 622.334 885.584 588.222 899.913 538.664L972.193 288.663Z"\n                  class="pi_tech_spinner_logo1" fill="transparent"/>\n            <defs>\n                <linearGradient id="paint3_linear" x1="1134.86" y1="580.575" x2="-69.2694" y2="5.95379e-05"\n                                gradientUnits="userSpaceOnUse">\n                    <stop stop-color="#3378FF"/>\n                    <stop offset="1" stop-color="#4BC3F6"/>\n                </linearGradient>\n            </defs>\n        </svg>\n        <h1 class="pi_tech_spinner_text">${loading_text}</h1>\n    </div>\n</div>\n'.replace("${loading_text}",n))},e.hide=function(){var e=document.getElementById("pi_tech_spinner");e&&e.remove()},e}(),n={ignoreCache:!1,headers:{Accept:"application/json, text/javascript, text/plain"},timeout:5e3};function t(e,n){return void 0===n&&(n=null),{ok:!1,status:e.status,statusText:e.statusText,headers:e.getAllResponseHeaders(),data:n||e.statusText,json:function(){return JSON.parse(n||e.statusText)}}}function r(e,r,o,i,s){void 0===o&&(o={}),void 0===i&&(i=null),void 0===s&&(s=n);var a=s.ignoreCache||n.ignoreCache,c=s.headers||n.headers,u=s.timeout||n.timeout;return new Promise((function(n,s){var l=new XMLHttpRequest;l.open(e,function(e,n){void 0===n&&(n={});var t=function(e){return void 0===e&&(e={}),Object.keys(e).map((function(n){return encodeURIComponent(n)+"="+encodeURIComponent(e[n])})).join("&")}(n);return t?e+(-1===e.indexOf("?")?"?":"&")+t:e}(r,o)),c&&Object.keys(c).forEach((function(e){return l.setRequestHeader(e,c[e])})),a&&l.setRequestHeader("Cache-Control","no-cache"),l.timeout=u,l.onload=function(e){n(function(e){return{ok:e.status>=200&&e.status<300,status:e.status,statusText:e.statusText,headers:e.getAllResponseHeaders(),data:e.responseText,json:function(){return JSON.parse(e.responseText)}}}(l))},l.onerror=function(e){n(t(l,"Failed to make request."))},l.ontimeout=function(e){n(t(l,"Request took longer than expected."))},"post"===e&&i?(l.setRequestHeader("Content-Type","application/json"),l.send(JSON.stringify(i))):l.send()}))}var o=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}c((r=r.apply(e,n||[])).next())}))},i=function(e,n){var t,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(e,s)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},s=function(){function e(){}return e.prototype.chargePaymentInit=function(e){return o(this,void 0,void 0,(function(){var n;return i(this,(function(t){switch(t.label){case 0:return[4,r("post","https://cards-stage.pitech.kz/gw/payments/cards/charge",{},e,{headers:{appId:e.appId}})];case 1:return(n=t.sent()).ok?[2,n.json()]:(console.error("Error while calling api (status="+n.status+", text="+n.statusText+")"),[2,null])}}))}))},e.prototype.authPaymentInit=function(e){return o(this,void 0,void 0,(function(){var n;return i(this,(function(t){switch(t.label){case 0:return[4,r("post","https://cards-stage.pitech.kz/gw/payments/cards/auth",{},e,{headers:{appId:e.appId}})];case 1:return(n=t.sent()).ok?[2,n.json()]:(console.error("Error while calling api (status="+n.status+", text="+n.statusText+")"),[2,null])}}))}))},e}(),a=function(e){return!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$","i").test(e)},c=function(){function n(){this.messageListener=null}return n.prototype.createIFrame=function(e){this.deleteIFrame();var n=document.createElement("div");n.setAttribute("class","pi_tech_container"),n.setAttribute("id","PiTechWidget");var t=document.createElement("iframe");t.setAttribute("class","pi_tech_iframe"),t.setAttribute("src",e),t.setAttribute("scrolling","no"),n.appendChild(t),document.body.appendChild(n)},n.prototype.deleteIFrame=function(){var e=document.getElementById("PiTechWidget");e&&e.remove(),this.messageListener&&window.removeEventListener("message",this.messageListener,!1)},n.prototype.createIframeListener=function(e){var n=this;return function(t){if(t&&t.data){var r=t.data.action,o=t.data.value;switch(r){case"SUCCESS":e.onSuccess(o);break;case"ERROR":e.onFailure(o);break;case"COMPLETE":e.onComplete(),n.deleteIFrame();break;default:return}}}},n.prototype.pay=function(n,t,r){return o=this,i=void 0,u=function(){var o,i;return function(e,n){var t,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(e,s)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(c){switch(c.label){case 0:if(!function(e){return console.log(e),e&&0!==Object.keys(e).length?e.appId&&""!==e.appId?!e.amount||e.amount<=0?(console.error("amount","Amount must be positive value"),!1):""===e.extClientRef?(console.error("extClientRef","Client reference must not be blank"),!1):e.currency&&""!==e.currency?e.description&&""!==e.description?e.email&&(n=e.email,!/^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i.test(n))?(console.error("email","Email invalid"),!1):e.extOrdersId&&""!==e.extOrdersId?e.successReturnUrl&&a(e.successReturnUrl)?!(!e.errorReturnUrl||!a(e.errorReturnUrl))||(console.error("errorReturnUrl","Failure return URL incorrect"),!1):(console.error("successReturnUrl","Success return URL incorrect"),!1):(console.error("extOrdersId","Order ID reference must not be blank"),!1):(console.error("description","Description undefined"),!1):(console.error("currency","Currency must not be blank"),!1):(console.error("appId","API key undefined"),!1):(console.error("options","Widget options undefined"),!1);var n}(t)||!function(e){return null==e.onSuccess?(console.error("onSuccess callback undefined"),!1):null!=e.onFailure||(console.error("onFailure callback undefined"),!1)}(r))return[2];switch(o=null,i=new s,e.show(t.lang),n){case"auth":return[3,1];case"charge":return[3,3]}return[3,5];case 1:return[4,i.authPaymentInit(t)];case 2:return o=c.sent(),[3,6];case 3:return[4,i.chargePaymentInit(t)];case 4:return o=c.sent(),[3,6];case 5:return console.error("invalid action"),[2];case 6:return e.hide(),o&&(this.createIFrame(o.paymentUrl),this.messageListener=this.createIframeListener(r),window.addEventListener("message",this.messageListener,!1)),[2]}}))},new((c=void 0)||(c=Promise))((function(e,n){function t(e){try{s(u.next(e))}catch(e){n(e)}}function r(e){try{s(u.throw(e))}catch(e){n(e)}}function s(n){var o;n.done?e(n.value):(o=n.value,o instanceof c?o:new c((function(e){e(o)}))).then(t,r)}s((u=u.apply(o,i||[])).next())}));var o,i,c,u},n}();window.styleAdded||(document.head.insertAdjacentHTML("beforeend","<style>.pi_tech_container {\n    z-index: 9997;\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    overflow: hidden;\n    opacity: 1;\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.65);\n}\n\n.pi_tech_iframe {\n    width: 500px;\n    height: 778px;\n    border: 1px solid black !important;\n    background-color: #ffffff;\n    border-radius: 10px;\n}\n\n.pi_tech_spinner_container {\n    display: block;\n}\n\n.pi_tech_spinner_text {\n    color: #ffffff;\n}\n\n@media (max-width: 768px) {\n    .pi_tech_spinner_text {\n        font-size: 1.5em;\n        margin: 0 auto;\n    }\n}\n\n@media (max-width: 480px) {\n    .pi_tech_iframe {\n        height: 100vh;\n        margin: 75px 0 10px 0;\n    }\n}\n\n.merchant-info {\n    min-height: 0 !important;\n}\n\n.pi_tech_spinner_logo {\n    stroke: #ffffff;\n    stroke-width: 10;\n    stroke-dasharray: 2400;\n    stroke-dashoffset: 2500;\n    animation: pi_tech_spinner_offset 1.4s ease-in forwards infinite, fill-it 1.4s 1.4s ease-in-out forwards infinite;\n}\n\n.pi_tech_spinner_logo1 {\n    stroke: #ffffff;\n    stroke-width: 10;\n    stroke-dasharray: 3200;\n    stroke-dashoffset: 3300;\n    animation: pi_tech_spinner_offset1 1.4s ease-in forwards infinite, fill-it 1.4s 1.4s ease-in-out forwards infinite;\n}\n\n.pi_tech_spinner_text {\n    color: #ffffff;\n}\n\n/* .pi_tech_spinner_container */\n\n@media (max-width: 768px) {\n    .pi_tech_spinner_text {\n        font-size: 1.5em;\n        margin: 0 auto;\n    }\n}\n\n@keyframes pi_tech_spinner_offset {\n    from {\n        stroke-dashoffset: 2500;\n    }\n\n    to {\n        stroke-dashoffset: 0;\n    }\n}\n\n@keyframes pi_tech_spinner_offset1 {\n    from {\n        stroke-dashoffset: 3300;\n    }\n\n    to {\n        stroke-dashoffset: 0;\n    }\n}\n\n@keyframes fill-it {\n    0% {\n        fill: #ffffff;\n        stroke-width: 0;\n    }\n\n    50% {\n        fill: transparent;\n    }\n}\n\n</style>"),window.styleAdded=!0),window.PitechPaymentsWidget=function(){return new c}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,